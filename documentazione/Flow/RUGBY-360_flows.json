[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Data Gathering (mongoDB version)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "327ec8debab2b052",
        "type": "tab",
        "label": "Flow 1 (PLAYER)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6fceb6a7a2e1cbc6",
        "type": "tab",
        "label": "Flow 2 (TEAM)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7d7b3c3c8b0860a",
        "type": "tab",
        "label": "Flow 4 (END-GAME)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "654adbefc93338fc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt://mosquitto:1883",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fa409388ce337d28",
        "type": "mongodb",
        "hostname": "rugby360_mongodb",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "rugbyDB",
        "name": ""
    },
    {
        "id": "8ec00216363c8a91",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#bb0a1e",
                "baseFont": "Arial Black,Arial Black,Gadget,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#bb0a1e",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#bb0a1e",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#f31e36",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#bb0a1e",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial Black,Arial Black,Gadget,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "RUGBY-360",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "31244ff564c00c31",
        "type": "ui_tab",
        "name": "Rugby-360 - [LIVE] Player Overview",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b0ea4a0077a49e2",
        "type": "ui_group",
        "name": "Player info",
        "tab": "31244ff564c00c31",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3b11b91e727413e9",
        "type": "ui_group",
        "name": "Player analysis - GPS",
        "tab": "31244ff564c00c31",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a7f5f6ff18cd6928",
        "type": "ui_group",
        "name": "Player analysis - Biometrics",
        "tab": "31244ff564c00c31",
        "order": 3,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f4d1e9444dd64511",
        "type": "ui_tab",
        "name": "Rugby-360 - [LIVE] Team Overview",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "97f34b737c0b33dd",
        "type": "ui_group",
        "name": "Team info",
        "tab": "f4d1e9444dd64511",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a2e82b8aba30acd6",
        "type": "ui_group",
        "name": "Team data",
        "tab": "f4d1e9444dd64511",
        "order": 2,
        "disp": true,
        "width": 14,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1572ac02937ae294",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "fc05e185f762e7bc",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "eebe0c34b3ca9757",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "da3692dac37e930d",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "2955c24b82069d4f",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "fc117b65f125a513",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "3257d4e5c40c12a4",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "69b9bfc01af88301",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "966a97d1d4017295",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "ad0b9e9c7210b521",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "5bd2cdd0a3a752d2",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "66c121efd2da13c9",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "2616b64dc0148fb9",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "f1444abd53932515",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "3984dab0f5e790de",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "3ae423060d468813",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "76528e011dbffdb4",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "1849fd38d44befdb",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "b573d41b6d61cb98",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "ee468a9b60785af4",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "b05d9b85474858c0",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "784fa531707e6ed4",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "0f57eb51be8f76ba",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "ce53e6191c31541d",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "6d6471e23d1afccb",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "ede008462012b9dc",
        "type": "ui_spacer",
        "z": "6fceb6a7a2e1cbc6",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 30,
        "width": 1,
        "height": 1
    },
    {
        "id": "5945d1645f1d9752",
        "type": "ui_tab",
        "name": "Rugby-360 - Post Match Stats",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "914464c7227e1a69",
        "type": "ui_group",
        "name": "TEAM INFO - Post match data analysis",
        "tab": "5945d1645f1d9752",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b55eb95bc7cccf8",
        "type": "ui_group",
        "name": "TEAM INFO - Concussions",
        "tab": "5945d1645f1d9752",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "42df8fc0d06c87b5",
        "type": "ui_spacer",
        "z": "327ec8debab2b052",
        "name": "spacer",
        "group": "7b0ea4a0077a49e2",
        "order": 5,
        "width": 7,
        "height": 1
    },
    {
        "id": "f88d90412806cec1",
        "type": "ui_spacer",
        "z": "327ec8debab2b052",
        "name": "spacer",
        "group": "7b0ea4a0077a49e2",
        "order": 6,
        "width": 7,
        "height": 1
    },
    {
        "id": "ba0b91590462ab42",
        "type": "ui_spacer",
        "z": "327ec8debab2b052",
        "name": "spacer",
        "group": "3b11b91e727413e9",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "5f244b8328648dcf",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/sensors",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "94a785c31baddfad",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 420,
        "wires": [
            [
                "660108ac0e2fcbe5"
            ]
        ]
    },
    {
        "id": "eb66a66d3a2888a2",
        "type": "mongodb in",
        "z": "f6f2187d.f17ca8",
        "mongodb": "fa409388ce337d28",
        "name": "rugby360@sensor_data-gathering",
        "collection": "simulations_20240827_154742",
        "operation": "find",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "19a3d7378ed91fec"
            ]
        ],
        "info": "{}"
    },
    {
        "id": "inject_node_id",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "eb66a66d3a2888a2"
            ]
        ]
    },
    {
        "id": "19a3d7378ed91fec",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "input_data-formatting",
        "func": "let data = msg.payload;\n\n// Create an array to hold the formatted data\nlet formattedData = data.map(doc => {\n    // Base object with common fields\n    let formattedDoc = {\n        _id: doc._id,\n        player_id: doc.player_id,\n        role: doc.role,\n        heart_rate: doc.heart_rate.heart_rate,\n        body_temperature: doc.temperature.body_temperature,\n        systolic: doc.blood_pressure.systolic,\n        diastolic: doc.blood_pressure.diastolic,\n        calories_consumed: doc.calories_consumed.calories,\n        gps_x: doc.gps.x,\n        gps_y: doc.gps.y,\n        velocity: doc.gps.velocity,\n        top_speed: doc.gps.top_speed,\n        impact_count: doc.impacts.impact_count,\n        impact_force: doc.impacts.impact_force,\n        timestamp: doc.timestamp,\n        elapsed_time: doc.elapsed_time,\n        impact_to_play_ratio: doc.impact_to_play_ratio.ratio,\n        velocity_variability: doc.velocity_variability.variability,\n        max_heart_rate: doc.max_heart_rate.max_heart_rate,\n        severity_index: doc.impact_severity_index.severity_index\n    };\n    return formattedDoc;\n});\n\nmsg.payload = formattedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "5f244b8328648dcf"
            ]
        ]
    },
    {
        "id": "660108ac0e2fcbe5",
        "type": "split",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 350,
        "y": 420,
        "wires": [
            [
                "b526137a403efe4d"
            ]
        ]
    },
    {
        "id": "b526137a403efe4d",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload.player_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "11",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "12",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "14",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "15",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 15,
        "x": 470,
        "y": 420,
        "wires": [
            [
                "012f977794c74952"
            ],
            [
                "b412b36636dd1ffe"
            ],
            [
                "ae9f78113b4d22e3"
            ],
            [
                "2e5b7108fd243068"
            ],
            [
                "bd5abfdfc15a8c28"
            ],
            [
                "052efdbde8209017"
            ],
            [
                "57114cc573f562f3"
            ],
            [
                "23e512c47c8906db"
            ],
            [
                "371bcc57936fdb56"
            ],
            [
                "ae1bfe134a2c8064"
            ],
            [
                "e9aa46665b72e11d"
            ],
            [
                "14210c33873c5ec5"
            ],
            [
                "ef1848e0410f9e5a"
            ],
            [
                "54e50b0f2ff8cd04"
            ],
            [
                "1cb588f4b12e080d"
            ]
        ]
    },
    {
        "id": "012f977794c74952",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/1/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "2e5b7108fd243068",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/4/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "23e512c47c8906db",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/8/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 440,
        "wires": []
    },
    {
        "id": "e9aa46665b72e11d",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/11/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 560,
        "wires": []
    },
    {
        "id": "57114cc573f562f3",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/7/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 400,
        "wires": []
    },
    {
        "id": "14210c33873c5ec5",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/12/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 600,
        "wires": []
    },
    {
        "id": "371bcc57936fdb56",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/9/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 480,
        "wires": []
    },
    {
        "id": "052efdbde8209017",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/6/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 360,
        "wires": []
    },
    {
        "id": "bd5abfdfc15a8c28",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/5/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "ae1bfe134a2c8064",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/10/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 520,
        "wires": []
    },
    {
        "id": "ae9f78113b4d22e3",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/3/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 240,
        "wires": []
    },
    {
        "id": "b412b36636dd1ffe",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/2/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 200,
        "wires": []
    },
    {
        "id": "ef1848e0410f9e5a",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/13/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 640,
        "wires": []
    },
    {
        "id": "54e50b0f2ff8cd04",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/14/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "1cb588f4b12e080d",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "rugby/players/15/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "bbffdcf3fdbed42a",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/1/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 120,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "27f00795d4a7ffd2",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/2/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "2797c712d77a2b7d",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/3/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 200,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "c8199199983342bf",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/4/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 240,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "2d430ef1ac6d2ab7",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/5/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "005b6b1571a74050",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/6/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "64c74c50c3b7497f",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/7/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 360,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "cb0f7f5f6d5f9cfc",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/8/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 400,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "9f02204f17c6275a",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/9/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 440,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "c5a3aa68e672665e",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/10/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 480,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "bab799e86036e4a0",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/11/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 520,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "c4c7b9fd445cab0b",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/12/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 560,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "41c38a90dcbd6a44",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/13/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "2f1ed9c7b1e21315",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/14/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "a81f0fa7216cad5c",
        "type": "mqtt in",
        "z": "327ec8debab2b052",
        "name": "",
        "topic": "rugby/players/15/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "f9216e7873cbc43b"
            ]
        ]
    },
    {
        "id": "3d6c3e51ee0fa09e",
        "type": "ui_gauge",
        "z": "327ec8debab2b052",
        "name": "HR gauge",
        "group": "3b11b91e727413e9",
        "order": 1,
        "width": 5,
        "height": 5,
        "gtype": "gage",
        "title": "Heart Rate",
        "label": "BPM",
        "format": "{{value}}",
        "min": "60",
        "max": "220",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "140",
        "seg2": "180",
        "diff": false,
        "className": "",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "f9216e7873cbc43b",
        "type": "json",
        "z": "327ec8debab2b052",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 340,
        "wires": [
            [
                "bfef3f3dc15e0941",
                "bb3c93393b24a3ec",
                "708392d6262e34d7",
                "35b734fba16ddd79",
                "730fdf8f93e16cc3",
                "9cd93b542ebcface",
                "0993241621f8d50f",
                "c222b115dd224ba3"
            ]
        ]
    },
    {
        "id": "bfef3f3dc15e0941",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "HR_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.heart_rate.heart_rate !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.heart_rate.heart_rate;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Heart rate data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "3d6c3e51ee0fa09e",
                "7103794508409d4b",
                "b43774a81c351417"
            ]
        ]
    },
    {
        "id": "2c4b68ec6b57911d",
        "type": "ui_dropdown",
        "z": "327ec8debab2b052",
        "name": "",
        "label": "Player selection",
        "tooltip": "",
        "place": "Player selection",
        "group": "7b0ea4a0077a49e2",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Prop",
                "value": "rugby/players/1/sensors",
                "type": "str"
            },
            {
                "label": "Prop",
                "value": "rugby/players/2/sensors",
                "type": "str"
            },
            {
                "label": "Hooker",
                "value": "rugby/players/3/sensors",
                "type": "str"
            },
            {
                "label": "Lock",
                "value": "rugby/players/4/sensors",
                "type": "str"
            },
            {
                "label": "Lock",
                "value": "rugby/players/5/sensors",
                "type": "str"
            },
            {
                "label": "Flanker",
                "value": "rugby/players/6/sensors",
                "type": "str"
            },
            {
                "label": "Flanker",
                "value": "rugby/players/7/sensors",
                "type": "str"
            },
            {
                "label": "Number-8",
                "value": "rugby/players/8/sensors",
                "type": "str"
            },
            {
                "label": "Scrum-half",
                "value": "rugby/players/9/sensors",
                "type": "str"
            },
            {
                "label": "Fly-half",
                "value": "rugby/players/10/sensors",
                "type": "str"
            },
            {
                "label": "Center",
                "value": "rugby/players/11/sensors",
                "type": "str"
            },
            {
                "label": "Center",
                "value": "rugby/players/12/sensors",
                "type": "str"
            },
            {
                "label": "Wing",
                "value": "rugby/players/13/sensors",
                "type": "str"
            },
            {
                "label": "Wing",
                "value": "rugby/players/14/sensors",
                "type": "str"
            },
            {
                "label": "Full-back",
                "value": "rugby/players/15/sensors",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "custom-dropdown",
        "x": 160,
        "y": 40,
        "wires": [
            [
                "401e4ca6f2547c08"
            ]
        ]
    },
    {
        "id": "401e4ca6f2547c08",
        "type": "change",
        "z": "327ec8debab2b052",
        "name": "Set MQTT Topic",
        "rules": [
            {
                "t": "set",
                "p": "player_topic",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "35b734fba16ddd79",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "TIME_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    var elapsed_time = msg.payload.elapsed_time;\n    msg.payload = `${elapsed_time} : 00`;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 420,
        "wires": [
            [
                "737b8f14e564cfed"
            ]
        ]
    },
    {
        "id": "737b8f14e564cfed",
        "type": "ui_text",
        "z": "327ec8debab2b052",
        "group": "7b0ea4a0077a49e2",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "time label",
        "label": "Minute:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "bb3c93393b24a3ec",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "SPEED_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.gps.velocity !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.gps.velocity;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Speed data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "1c7b4c38397d3ac2",
                "3308ccfce59e32c3"
            ]
        ]
    },
    {
        "id": "1c7b4c38397d3ac2",
        "type": "ui_gauge",
        "z": "327ec8debab2b052",
        "name": "SPD gauge",
        "group": "3b11b91e727413e9",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "Velocity",
        "label": "Km/h",
        "format": "{{value}}",
        "min": 0,
        "max": "45",
        "colors": [
            "#008fb3",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 60,
        "seg2": 120,
        "diff": false,
        "className": "",
        "x": 850,
        "y": 220,
        "wires": []
    },
    {
        "id": "708392d6262e34d7",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "ROLE_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.role !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.role;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Role data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "f39dad3f0c808728"
            ]
        ]
    },
    {
        "id": "f39dad3f0c808728",
        "type": "ui_text",
        "z": "327ec8debab2b052",
        "group": "7b0ea4a0077a49e2",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "role label",
        "label": "Role under review:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "custom-role",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "15",
        "color": "#ea3434",
        "x": 840,
        "y": 380,
        "wires": []
    },
    {
        "id": "3c44d1e38eeb089b",
        "type": "ui_template",
        "z": "327ec8debab2b052",
        "group": "7b0ea4a0077a49e2",
        "name": "CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>   \n    .nr-dashboard-cardtitle {\n        font-weight: bold;\n        text-align: center;\n    }\n    .custom-dropdown {\n        position: relative;\n        display: inline-block;\n        justify-content: center; /* Center items horizontally */\n    }\n    .custom-role {\n        text-align: left;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7103794508409d4b",
        "type": "ui_chart",
        "z": "327ec8debab2b052",
        "name": "HR chart",
        "group": "3b11b91e727413e9",
        "order": 2,
        "width": 7,
        "height": 5,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#4c544a",
            "#d32727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3308ccfce59e32c3",
        "type": "ui_chart",
        "z": "327ec8debab2b052",
        "name": "SPD chart",
        "group": "3b11b91e727413e9",
        "order": 4,
        "width": 7,
        "height": 5,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ee90b1",
            "#973b6c",
            "#ff7f0e",
            "#4baf8e",
            "#1e7fa9",
            "#d32727",
            "#cad345",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "bbb929dcd13ddeaa",
        "type": "ui_chart",
        "z": "327ec8debab2b052",
        "name": "TEMP chart",
        "group": "a7f5f6ff18cd6928",
        "order": 2,
        "width": 11,
        "height": 6,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "36",
        "ymax": "40",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e2806f",
            "#cb1515",
            "#968bda",
            "#89d289",
            "#ccd54d",
            "#2845d7",
            "#94ffdf",
            "#f0952d",
            "#c86fa7"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "730fdf8f93e16cc3",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "TEMP_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.temperature.body_temperature !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.temperature.body_temperature;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Speed data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            [
                "bbb929dcd13ddeaa"
            ]
        ]
    },
    {
        "id": "4226ce8b1fdd2f37",
        "type": "ui_chart",
        "z": "327ec8debab2b052",
        "name": "B-PRESS chart",
        "group": "a7f5f6ff18cd6928",
        "order": 1,
        "width": 11,
        "height": 4,
        "label": "Blood Pressure",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "40",
        "ymax": "180",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e11414",
            "#3fabcf",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "9cd93b542ebcface",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "B-PRESS_exct",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'blood_pressure' property\n    if (msg.payload && msg.payload.blood_pressure) {\n        // Access the 'systolic' and 'diastolic' values directly\n        var systolic = msg.payload.blood_pressure.systolic;\n        var diastolic = msg.payload.blood_pressure.diastolic;\n\n        // Prepare the data for the chart\n        msg.payload = [\n            {\n                \"series\": [\"Systolic\", \"Diastolic\"], // Series names\n                \"data\": [[systolic], [diastolic]],   // Data points for each series\n                \"labels\": [\"\"]         // X-axis labels\n            }\n        ];\n    } else {\n        // Handle case where 'blood_pressure' is not present\n        msg.payload = \"Blood pressure data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 340,
        "wires": [
            [
                "4226ce8b1fdd2f37"
            ]
        ]
    },
    {
        "id": "1fc0579e1ea12b8f",
        "type": "ui_toast",
        "z": "327ec8debab2b052",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "HR alert",
        "x": 1000,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b43774a81c351417",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "HB Check",
        "func": "\nvar hb = msg.payload\n\n\nvar message;\nif (hb > 200) {\n    message = \"Heart beat above the critical threshold, pay attention.\";\n}\n\n// Aggiornamento del messaggio di output\nmsg.payload = message;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            [
                "1fc0579e1ea12b8f"
            ]
        ]
    },
    {
        "id": "0993241621f8d50f",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "SEV_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.impact_severity_index.severity_index !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.impact_severity_index.severity_index;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"impact rate data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "a10f3928e0d65473"
            ]
        ]
    },
    {
        "id": "c8601c31a0d318e4",
        "type": "ui_toast",
        "z": "327ec8debab2b052",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "HR alert",
        "x": 1000,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a10f3928e0d65473",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "SEV Check",
        "func": "var sev = msg.payload\n\nvar message;\nif (sev > 200) {\n    message = \"Critical impact, above of critical threshold, pay attention.\";\n}\n\n// Aggiornamento del messaggio di output\nmsg.payload = message;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 40,
        "wires": [
            [
                "c8601c31a0d318e4"
            ]
        ]
    },
    {
        "id": "c222b115dd224ba3",
        "type": "function",
        "z": "327ec8debab2b052",
        "name": "HEATMAP_exct",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\nvar heatmap_array = [];\n\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\nif (msg.topic === player_topic) {\n    var y = msg.payload.gps.unic;\n\n    for (var i = 0; i < 105 * 65; i++){\n        if (i != y) { heatmap_array.push(0) }\n        else { heatmap_array.push(100); }\n    }\n\n    msg.payload = heatmap_array;\n    return msg;\n} else { return null; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "de506a1924fd762a"
            ]
        ]
    },
    {
        "id": "de506a1924fd762a",
        "type": "ui_heat_map",
        "z": "327ec8debab2b052",
        "group": "7b0ea4a0077a49e2",
        "order": 7,
        "width": 7,
        "height": 5,
        "name": "",
        "rows": "65",
        "columns": "105",
        "minMax": false,
        "minimumValue": 0,
        "maximumValue": 0,
        "backgroundType": "color",
        "backgroundColor": "#58a43d",
        "image": "never",
        "radius": "35",
        "opacity": "0",
        "blur": "0.65",
        "showValues": false,
        "gridType": "vals",
        "valuesDecimals": 0,
        "showLegend": false,
        "legendType": "none",
        "legendDecimals": 0,
        "legendCount": 2,
        "x": 840,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ef918655f567e247",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/1/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "9c59c2c3acc5eacf",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/2/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "9a731b1a6db518c8",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/3/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 220,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "9f4ed426268aa802",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/4/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 260,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "b30eb5dfc1c3b0bb",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/5/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "ba47aa04dc12bf36",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/6/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 340,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "defb7108bea6cfb1",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/7/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 380,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "e6ad7b79402f6ad8",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/8/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "afc3207e8ed72929",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/9/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 460,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "33505e23f0c394a9",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/10/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 500,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "e7881fb6ebdeac3f",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/11/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "dfaf49fd118f57ab",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/12/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 580,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "02784366f0c54425",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/13/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 620,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "f7ad8038e1cec99f",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/14/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 660,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "5bd955175a410e1e",
        "type": "mqtt in",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "topic": "rugby/players/15/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 700,
        "wires": [
            [
                "cd0cb19fb2c523ef"
            ]
        ]
    },
    {
        "id": "0bd9a8b4050869b4",
        "type": "function",
        "z": "6fceb6a7a2e1cbc6",
        "name": "ALL-HR_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar heartRates = flow.get('heartRates') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined && msg.payload.heart_rate && msg.payload.heart_rate.heart_rate !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var heartRate = msg.payload.heart_rate.heart_rate;\n\n    // Update the heart rate for this player in the heartRates object\n    heartRates[playerId] = heartRate;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('heartRates', heartRates);\n\n    // Prepare the data for the chart\n    var series = Object.keys(heartRates).map(id => [id]); // Create series names\n    var data = Object.values(heartRates).map(hr => [hr]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 200,
        "wires": [
            [
                "8ce3775dc179b9ce"
            ]
        ]
    },
    {
        "id": "8ce3775dc179b9ce",
        "type": "ui_chart",
        "z": "6fceb6a7a2e1cbc6",
        "name": "HR chart",
        "group": "a2e82b8aba30acd6",
        "order": 1,
        "width": 7,
        "height": 7,
        "label": "TEAM - Heart Rate",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "80",
        "ymax": "220",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#4c544a",
            "#d32727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cd0cb19fb2c523ef",
        "type": "json",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "0bd9a8b4050869b4",
                "436dc135f17772df",
                "f053265d45f60dbe",
                "e08871049f1627b7",
                "03a107f2483f4879",
                "fd970b85f3b58981",
                "ebfa12a9c69b11b6"
            ]
        ]
    },
    {
        "id": "03a107f2483f4879",
        "type": "function",
        "z": "6fceb6a7a2e1cbc6",
        "name": "TIME_extr",
        "func": "// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\n    var elapsed_time = msg.payload.elapsed_time;\n    msg.payload = `${elapsed_time} : 00`;\n    return msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 400,
        "wires": [
            [
                "48ed3dc0308bc350"
            ]
        ]
    },
    {
        "id": "fda07f5b9b889d0b",
        "type": "ui_template",
        "z": "6fceb6a7a2e1cbc6",
        "group": "97f34b737c0b33dd",
        "name": "CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>   \n    .nr-dashboard-cardtitle {\n        font-weight: bold;\n        color: \"blue\";\n        text-align: center;\n    }\n    .custom-dropdown {\n        position: relative;\n        display: inline-block;\n        justify-content: center; /* Center items horizontally */\n    }\n    .custom-role {\n        text-align: left;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 110,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "deb5a4ebea26d6cd",
        "type": "ui_chart",
        "z": "6fceb6a7a2e1cbc6",
        "name": "SPD chart",
        "group": "a2e82b8aba30acd6",
        "order": 3,
        "width": 7,
        "height": 7,
        "label": "TEAM - Velocity",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "45",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#91b9ee",
            "#45a54c",
            "#ff7f0e",
            "#4baf8e",
            "#1e7fa9",
            "#d32727",
            "#e2e79d",
            "#9467bd",
            "#6795c1"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "436dc135f17772df",
        "type": "function",
        "z": "6fceb6a7a2e1cbc6",
        "name": "ALL-SPEED_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the velocities object from the flow context\nvar velocities = flow.get('velocities') || {};\n\n\n // Check if msg.payload has the necessary 'player_id' and 'velocity' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.gps && msg.payload.gps.velocity !== undefined) {\n        // Extract player ID and velocity\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var velocity = msg.payload.gps.velocity;\n\n        // Update the velocity for this player in the velocities object\n        velocities[playerId] = velocity;\n\n        // Store the updated velocities object back into the flow context\n        flow.set('velocities', velocities);\n\n        // Prepare the data for the chart\n        var series = Object.keys(velocities).map(id => [id]); // Create series names\n        var data = Object.values(velocities).map(v => [v]); // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Velocity values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Velocity data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "deb5a4ebea26d6cd"
            ]
        ]
    },
    {
        "id": "d55b3469dc99cfcb",
        "type": "ui_chart",
        "z": "6fceb6a7a2e1cbc6",
        "name": "CAL chart",
        "group": "a2e82b8aba30acd6",
        "order": 2,
        "width": 7,
        "height": 7,
        "label": "TEAM - Calories",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "2000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#9791ee",
            "#681842",
            "#ca9363",
            "#4baf8e",
            "#58b3da",
            "#d32727",
            "#cad345",
            "#44ab55",
            "#d7c3da"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f053265d45f60dbe",
        "type": "function",
        "z": "6fceb6a7a2e1cbc6",
        "name": "ALL-CAL_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the calories object from the flow context\nvar caloriesData = flow.get('caloriesData') || {};\n\n    // Check if msg.payload has the necessary 'player_id' and 'calories' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.calories_consumed && msg.payload.calories_consumed.calories !== undefined) {\n        // Extract player ID and calories\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var calories = msg.payload.calories_consumed.calories;\n\n        // Update the calories data for this player in the caloriesData object\n        caloriesData[playerId] = calories;\n\n        // Store the updated caloriesData object back into the flow context\n        flow.set('caloriesData', caloriesData);\n\n        // Prepare the data for the chart\n        var series = Object.keys(caloriesData).map(id => [id]); // Create series names\n        var data = Object.values(caloriesData).map(c => [c]);             // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Calories values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Calories data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 280,
        "wires": [
            [
                "d55b3469dc99cfcb"
            ]
        ]
    },
    {
        "id": "48ed3dc0308bc350",
        "type": "ui_gauge",
        "z": "6fceb6a7a2e1cbc6",
        "name": "",
        "group": "97f34b737c0b33dd",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Match Time",
        "label": "",
        "format": "{{value}}",
        "min": "0",
        "max": "80",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 400,
        "wires": []
    },
    {
        "id": "c41cbc851d1f79df",
        "type": "ui_chart",
        "z": "6fceb6a7a2e1cbc6",
        "name": "TEMP chart",
        "group": "a2e82b8aba30acd6",
        "order": 4,
        "width": 7,
        "height": 7,
        "label": "TEAM - Temperature",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "36",
        "ymax": "40",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e2806f",
            "#cb1515",
            "#968bda",
            "#89d289",
            "#ccd54d",
            "#2845d7",
            "#94ffdf",
            "#f0952d",
            "#c86fa7"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e08871049f1627b7",
        "type": "function",
        "z": "6fceb6a7a2e1cbc6",
        "name": "ALL-TEMP_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the temperatures object from the flow context\nvar temperatures = flow.get('temperatures') || {};\n\n    // Check if msg.payload has the necessary 'player_id' and 'temperature' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.temperature && msg.payload.temperature.body_temperature !== undefined) {\n        // Extract player ID and temperature\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var temperature = msg.payload.temperature.body_temperature;\n\n        // Update the temperature for this player in the temperatures object\n        temperatures[playerId] = temperature;\n\n        // Store the updated temperatures object back into the flow context\n        flow.set('temperatures', temperatures);\n\n        // Prepare the data for the chart\n        var series = Object.keys(temperatures).map(id => [id]); // Create series names\n        var data = Object.values(temperatures).map(t => [t]);            // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Temperature values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Temperature data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 320,
        "wires": [
            [
                "c41cbc851d1f79df"
            ]
        ]
    },
    {
        "id": "fd970b85f3b58981",
        "type": "function",
        "z": "6fceb6a7a2e1cbc6",
        "name": "ALL-SEV_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the severityIndices object from the flow context\nvar severityIndices = flow.get('severityIndices') || {};\n\n    // Check if msg.payload has the necessary 'player_id' and 'impact_severity_index' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.impact_severity_index && msg.payload.impact_severity_index.severity_index !== undefined) {\n        // Extract player ID and severity index\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var severityIndex = msg.payload.impact_severity_index.severity_index;\n\n        // Update the severity index for this player in the severityIndices object\n        severityIndices[playerId] = severityIndex;\n\n        // Store the updated severityIndices object back into the flow context\n        flow.set('severityIndices', severityIndices);\n\n        // Prepare the data for the chart\n        var series = Object.keys(severityIndices).map(id => [id]); // Create series names\n        var data = Object.values(severityIndices).map(si => [si]);           // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Severity index values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Severity index data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "955887ae722ec734"
            ]
        ]
    },
    {
        "id": "955887ae722ec734",
        "type": "ui_chart",
        "z": "6fceb6a7a2e1cbc6",
        "name": "SEV chart",
        "group": "97f34b737c0b33dd",
        "order": 21,
        "width": 5,
        "height": "6",
        "label": "TEAM - Severity INDX",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "200",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e2806f",
            "#cb1515",
            "#968bda",
            "#89d289",
            "#ccd54d",
            "#2845d7",
            "#94ffdf",
            "#f0952d",
            "#c86fa7"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ebfa12a9c69b11b6",
        "type": "function",
        "z": "6fceb6a7a2e1cbc6",
        "name": "ALL-SEV-COUNT_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the impactCounts object from the flow context\nvar impactCounts = flow.get('impactCounts') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'impacts' properties\nif (msg.payload && msg.payload.player_id !== undefined && msg.payload.impacts && msg.payload.impacts.impact_count !== undefined) {\n    // Extract player ID and impact count\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var impactCount = msg.payload.impacts.impact_count;\n\n    // Update the impact count for this player in the impactCounts object\n    impactCounts[playerId] = impactCount;\n\n    // Store the updated impactCounts object back into the flow context\n    flow.set('impactCounts', impactCounts);\n\n    // Prepare the data for the chart\n    var series = Object.keys(impactCounts).map(id => [id]); // Create series names\n    var data = Object.values(impactCounts).map(ic => [ic]);           // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Impact count values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Impact count data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 480,
        "wires": [
            [
                "a0ef47744ef79e9f"
            ]
        ]
    },
    {
        "id": "a0ef47744ef79e9f",
        "type": "ui_chart",
        "z": "6fceb6a7a2e1cbc6",
        "name": "SEV-COUNT chart",
        "group": "97f34b737c0b33dd",
        "order": 10,
        "width": 5,
        "height": 5,
        "label": "TEAM - Impact COUNT",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#b4e26f",
            "#158ecb",
            "#da8bb5",
            "#bf89d2",
            "#504dd5",
            "#d72828",
            "#fff694",
            "#f0952d",
            "#6fc8c2"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "af3ffd3510bab79f",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/1/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "914b36bc1290498b",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/2/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 160,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "123f6cf7d4e15c10",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/3/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "8b98920270bacf75",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/4/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "108a864c1bd391a1",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/5/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "ebfd6f60b15a0816",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/6/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "d3e5a9d56cde173b",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/7/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 360,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "d2922ae4ae6135df",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/8/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 400,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "b0c76ba65fd8af88",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/9/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 440,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "c541c50d26e7bd89",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/10/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 480,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "9d09af72e677ea90",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/11/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 520,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "bfcf2913d6b73232",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/12/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 560,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "ce8eb4a818538476",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/13/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "06b393ed23d0e4fb",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/14/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "110bd44b8c865039",
        "type": "mqtt in",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "topic": "rugby/players/15/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "ef81b5ad4795f45f"
            ]
        ]
    },
    {
        "id": "ef81b5ad4795f45f",
        "type": "json",
        "z": "d7d7b3c3c8b0860a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "74c049ea98f974f6",
                "0e7e744262653fbe",
                "f36352fe40994345",
                "1021616b2c6f3b3f",
                "43ca2d35ce157e16",
                "11a30205b1faab62",
                "eab41ca6da2255a9"
            ]
        ]
    },
    {
        "id": "c52a537129e5a8f0",
        "type": "ui_chart",
        "z": "d7d7b3c3c8b0860a",
        "name": "AVG_SPEED",
        "group": "914464c7227e1a69",
        "order": 1,
        "width": 7,
        "height": 5,
        "label": "TEAM - AVG SPEED",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "35",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "74c049ea98f974f6",
        "type": "function",
        "z": "d7d7b3c3c8b0860a",
        "name": "AVG_SPEED_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar avg_speed = flow.get('AVG_SPEED') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var avg_s = msg.payload.average_velocity;\n\n    // Update the heart rate for this player in the heartRates object\n    avg_speed[playerId] = avg_s;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('AVG_SPEED', avg_speed);\n\n    // Prepare the data for the chart\n    var series = Object.keys(avg_speed).map(id => [id]); // Create series names\n    var data = Object.values(avg_speed).map(as => [as]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "c52a537129e5a8f0"
            ]
        ]
    },
    {
        "id": "f94122b6cd701a23",
        "type": "ui_template",
        "z": "d7d7b3c3c8b0860a",
        "group": "914464c7227e1a69",
        "name": "CSS",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style>   \n    .nr-dashboard-cardtitle {\n        font-weight: bold;\n        color: \"blue\";\n        text-align: center;\n    }\n    .custom-dropdown {\n        position: relative;\n        display: inline-block;\n        justify-content: center; /* Center items horizontally */\n    }\n    .custom-role {\n        text-align: left;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 110,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "db0f226581fece48",
        "type": "ui_chart",
        "z": "d7d7b3c3c8b0860a",
        "name": "TOT_KM",
        "group": "914464c7227e1a69",
        "order": 2,
        "width": 7,
        "height": 5,
        "label": "TEAM - TOTAL DISTANCE",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0e7e744262653fbe",
        "type": "function",
        "z": "d7d7b3c3c8b0860a",
        "name": "TOT_KM_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar tot_km = flow.get('TOTAL_KM') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var t_km = msg.payload.distance_traveled_km;\n\n    // Update the heart rate for this player in the heartRates object\n    tot_km[playerId] = t_km;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('TOTAL_KM', tot_km);\n\n    // Prepare the data for the chart\n    var series = Object.keys(tot_km).map(id => [id]); // Create series names\n    var data = Object.values(tot_km).map(km => [km]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 220,
        "wires": [
            [
                "db0f226581fece48"
            ]
        ]
    },
    {
        "id": "8300f64f1e53e9dd",
        "type": "ui_chart",
        "z": "d7d7b3c3c8b0860a",
        "name": "AVG_CAL",
        "group": "914464c7227e1a69",
        "order": 4,
        "width": 7,
        "height": 5,
        "label": "TEAM - AVG CALORIES",
        "chartType": "polar-area",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "200",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f36352fe40994345",
        "type": "function",
        "z": "d7d7b3c3c8b0860a",
        "name": "AVG_CAL_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar tot_cal = flow.get('TOTAL_CAL') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var cal = msg.payload.calories_consumed;\n\n    // Update the heart rate for this player in the heartRates object\n    tot_cal[playerId] = cal;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('TOTAL_CAL', tot_cal);\n\n    // Prepare the data for the chart\n    var series = Object.keys(tot_cal).map(id => [id]); // Create series names\n    var data = Object.values(tot_cal).map(cl => [cl]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "8300f64f1e53e9dd"
            ]
        ]
    },
    {
        "id": "078d917b490ef7b7",
        "type": "ui_chart",
        "z": "d7d7b3c3c8b0860a",
        "name": "AVG_IMP",
        "group": "914464c7227e1a69",
        "order": 5,
        "width": 7,
        "height": 5,
        "label": "TEAM - AVG IMPACT FORCE",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "3",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1021616b2c6f3b3f",
        "type": "function",
        "z": "d7d7b3c3c8b0860a",
        "name": "AVG_IMP_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar avg_impact = flow.get('IMPACT') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var imp = msg.payload.impacts.average_impact_force;\n\n    // Update the heart rate for this player in the heartRates object\n    avg_impact[playerId] = imp;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('IMPACT', avg_impact);\n\n    // Prepare the data for the chart\n    var series = Object.keys(avg_impact).map(id => [id]); // Create series names\n    var data = Object.values(avg_impact).map(im => [im]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "078d917b490ef7b7"
            ]
        ]
    },
    {
        "id": "41c6db3d5a1362f9",
        "type": "ui_chart",
        "z": "d7d7b3c3c8b0860a",
        "name": "IMP_RATIO",
        "group": "914464c7227e1a69",
        "order": 6,
        "width": 7,
        "height": 5,
        "label": "TEAM - IMPACT RATIO",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "3",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "43ca2d35ce157e16",
        "type": "function",
        "z": "d7d7b3c3c8b0860a",
        "name": "IMP_RATIO_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar imp_to_play = flow.get('IMPACT') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var imp = msg.payload.impact_to_play_ratio;\n\n    // Update the heart rate for this player in the heartRates object\n    imp_to_play[playerId] = imp;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('IMPACT', imp_to_play);\n\n    // Prepare the data for the chart\n    var series = Object.keys(imp_to_play).map(id => [id]); // Create series names\n    var data = Object.values(imp_to_play).map(im => [im]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 340,
        "wires": [
            [
                "41c6db3d5a1362f9"
            ]
        ]
    },
    {
        "id": "11b596e524b62223",
        "type": "ui_chart",
        "z": "d7d7b3c3c8b0860a",
        "name": "SPD_RATIO",
        "group": "914464c7227e1a69",
        "order": 3,
        "width": 7,
        "height": 5,
        "label": "TEAM - SPD VARIABILITY",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "3",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "11a30205b1faab62",
        "type": "function",
        "z": "d7d7b3c3c8b0860a",
        "name": "SPD_RATIO_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar spd_ratio = flow.get('SPEED') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var spd = msg.payload.velocity_variability;\n\n    // Update the heart rate for this player in the heartRates object\n    spd_ratio[playerId] = spd;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('SPEED', spd_ratio);\n\n    // Prepare the data for the chart\n    var series = Object.keys(spd_ratio).map(id => [id]); // Create series names\n    var data = Object.values(spd_ratio).map(sp => [sp]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 380,
        "wires": [
            [
                "11b596e524b62223"
            ]
        ]
    },
    {
        "id": "eab41ca6da2255a9",
        "type": "function",
        "z": "d7d7b3c3c8b0860a",
        "name": "MAX_IMP_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the impact object from the flow context\nvar impact = flow.get('impact') || {};\nvar maxImpact = flow.get('MAX_impact') || -Infinity; // Initialize with a very low number\nvar maxImpactPlayer = flow.get('MAX_impact_player') || \"\"; // Initialize with empty string\n\n// Check if msg.payload has the necessary 'player_id' and 'impact_severity_index' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and impact severity index\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var imp = msg.payload.impact_severity_index;\n\n    // Update the impact for this player in the impact object\n    impact[playerId] = imp;\n\n    // Store the updated impact object back into the flow context\n    flow.set('impact', impact);\n\n    // Check if the current impact severity index is higher than the current max\n    if (imp > maxImpact) {\n        maxImpact = imp;\n        maxImpactPlayer = playerId; // Update the player ID with the maximum impact\n        flow.set('MAX_impact', maxImpact); // Update the max impact in the flow context\n        flow.set('MAX_impact_player', maxImpactPlayer); // Update the player with the max impact\n    }\n}\n\n// Prepare the output message with the player having the maximum impact severity index\nmsg.payload = {\n    player_id: maxImpactPlayer,\n    impact_severity_index: maxImpact\n};\n\nflow.set('impact', {});\nflow.set('MAX_impact', -Infinity);\nflow.set('MAX_impact_player', \"\");\n\n// Return the message with the player having the highest impact severity index\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 420,
        "wires": [
            [
                "37f8ce5482748e7f",
                "775b769e8f23b424"
            ]
        ]
    },
    {
        "id": "37f8ce5482748e7f",
        "type": "ui_text",
        "z": "d7d7b3c3c8b0860a",
        "group": "4b55eb95bc7cccf8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Severity",
        "format": "{{msg.payload.impact_severity_index}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "15",
        "color": "#e72323",
        "x": 820,
        "y": 460,
        "wires": []
    },
    {
        "id": "775b769e8f23b424",
        "type": "ui_text",
        "z": "d7d7b3c3c8b0860a",
        "group": "4b55eb95bc7cccf8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Player",
        "format": "{{msg.payload.player_id}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "22",
        "color": "#000000",
        "x": 830,
        "y": 420,
        "wires": []
    }
]