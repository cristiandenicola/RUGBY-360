[
    {
        "id": "53f99c037dcacdcf",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6d003b7f94ce6f96",
        "type": "tab",
        "label": "Data Gathering (mongoDB version)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "61a834ebfc894f6a",
        "type": "tab",
        "label": "Flow 1 (PLAYER)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a272bb0068b56f17",
        "type": "tab",
        "label": "Flow 2 (TEAM)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad3a7eee14e7200e",
        "type": "tab",
        "label": "Flow 4 (END-GAME)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "654adbefc93338fc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt://mosquitto:1883",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8ec00216363c8a91",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#bb0a1e",
                "baseFont": "Arial Black,Arial Black,Gadget,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#bb0a1e",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#bb0a1e",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#f31e36",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#bb0a1e",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial Black,Arial Black,Gadget,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "RUGBY-360",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "31244ff564c00c31",
        "type": "ui_tab",
        "name": "Rugby-360 - [LIVE] Player Overview",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f4d1e9444dd64511",
        "type": "ui_tab",
        "name": "Rugby-360 - [LIVE] Team Overview",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5945d1645f1d9752",
        "type": "ui_tab",
        "name": "Rugby-360 - Post Match Stats",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b0ea4a0077a49e2",
        "type": "ui_group",
        "name": "Player info",
        "tab": "31244ff564c00c31",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3b11b91e727413e9",
        "type": "ui_group",
        "name": "Player analysis - GPS",
        "tab": "31244ff564c00c31",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a7f5f6ff18cd6928",
        "type": "ui_group",
        "name": "Player analysis - Biometrics",
        "tab": "31244ff564c00c31",
        "order": 3,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97f34b737c0b33dd",
        "type": "ui_group",
        "name": "Team info",
        "tab": "f4d1e9444dd64511",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a2e82b8aba30acd6",
        "type": "ui_group",
        "name": "Team data",
        "tab": "f4d1e9444dd64511",
        "order": 2,
        "disp": true,
        "width": 14,
        "collapse": false,
        "className": ""
    },
    {
        "id": "914464c7227e1a69",
        "type": "ui_group",
        "name": "TEAM INFO - Post match data analysis",
        "tab": "5945d1645f1d9752",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b55eb95bc7cccf8",
        "type": "ui_group",
        "name": "TEAM INFO - Concussions",
        "tab": "5945d1645f1d9752",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fa409388ce337d28",
        "type": "mongodb",
        "hostname": "rugby360_mongodb",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "rugbyDB",
        "name": ""
    },
    {
        "id": "90b8a334f09cf6e3",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "53a5cad51e6b3753",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "c1a7f5aaa9080109",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "3e134b7a8cfd8934",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "9c09c449c2991ea7",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "34c3824cbf7ae40a",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "0452d0164d15df8d",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "6b39b1d87a087dc9",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "da055de78a6b15f5",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "bb5c87e731a854b4",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "86e8db2a4e30b8b1",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "31b3337464888f2f",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "7258c7636ff15eb5",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "90ee1941b151e53f",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "639c899336fc031a",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "a30bcb0c0769a483",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "fa0220b128ecc38e",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "829044c91d094f0d",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "f4f38dc3cce6c063",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "6c0c9b4ee1e72cd2",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "53296c36efc4b8f1",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "36c83d0cd8a6e6c6",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "4ee4c345589caf75",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "59c6768f18d20fb6",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "0710a9551ca63813",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "0ab115b09fd2ca1a",
        "type": "ui_spacer",
        "z": "a272bb0068b56f17",
        "name": "spacer",
        "group": "97f34b737c0b33dd",
        "order": 30,
        "width": 1,
        "height": 1
    },
    {
        "id": "2d6a657bf437a2f8",
        "type": "ui_spacer",
        "z": "61a834ebfc894f6a",
        "name": "spacer",
        "group": "7b0ea4a0077a49e2",
        "order": 5,
        "width": 7,
        "height": 1
    },
    {
        "id": "1d292cf8ac21c8bf",
        "type": "ui_spacer",
        "z": "61a834ebfc894f6a",
        "name": "spacer",
        "group": "7b0ea4a0077a49e2",
        "order": 6,
        "width": 7,
        "height": 1
    },
    {
        "id": "1cb51c1a81cebaa0",
        "type": "ui_spacer",
        "z": "61a834ebfc894f6a",
        "name": "spacer",
        "group": "3b11b91e727413e9",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "efb952c749545f56",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/sensors",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "816afdaede5d6086",
        "type": "mqtt in",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 420,
        "wires": [
            [
                "a38193edd8866922"
            ]
        ]
    },
    {
        "id": "08add17e66d627a9",
        "type": "mongodb in",
        "z": "6d003b7f94ce6f96",
        "mongodb": "fa409388ce337d28",
        "name": "rugby360@sensor_data-gathering",
        "collection": "simulations_20240827_154742",
        "operation": "find",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "c457803a08c737e1"
            ]
        ],
        "info": "{}"
    },
    {
        "id": "ad2f8235f2bdd9a3",
        "type": "inject",
        "z": "6d003b7f94ce6f96",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "08add17e66d627a9"
            ]
        ]
    },
    {
        "id": "c457803a08c737e1",
        "type": "function",
        "z": "6d003b7f94ce6f96",
        "name": "input_data-formatting",
        "func": "let data = msg.payload;\n\n// Create an array to hold the formatted data\nlet formattedData = data.map(doc => {\n    // Base object with common fields\n    let formattedDoc = {\n        _id: doc._id,\n        player_id: doc.player_id,\n        role: doc.role,\n        heart_rate: doc.heart_rate.heart_rate,\n        body_temperature: doc.temperature.body_temperature,\n        systolic: doc.blood_pressure.systolic,\n        diastolic: doc.blood_pressure.diastolic,\n        calories_consumed: doc.calories_consumed.calories,\n        gps_x: doc.gps.x,\n        gps_y: doc.gps.y,\n        velocity: doc.gps.velocity,\n        top_speed: doc.gps.top_speed,\n        impact_count: doc.impacts.impact_count,\n        impact_force: doc.impacts.impact_force,\n        timestamp: doc.timestamp,\n        elapsed_time: doc.elapsed_time,\n        impact_to_play_ratio: doc.impact_to_play_ratio.ratio,\n        velocity_variability: doc.velocity_variability.variability,\n        max_heart_rate: doc.max_heart_rate.max_heart_rate,\n        severity_index: doc.impact_severity_index.severity_index\n    };\n    return formattedDoc;\n});\n\nmsg.payload = formattedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "efb952c749545f56"
            ]
        ]
    },
    {
        "id": "a38193edd8866922",
        "type": "split",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 350,
        "y": 420,
        "wires": [
            [
                "c3533357bf58bd8b"
            ]
        ]
    },
    {
        "id": "c3533357bf58bd8b",
        "type": "switch",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "property": "payload.player_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "11",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "12",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "14",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "15",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 15,
        "x": 470,
        "y": 420,
        "wires": [
            [
                "3fbb469fff1fb46e"
            ],
            [
                "b11994675e8b0eb6"
            ],
            [
                "417964004201af87"
            ],
            [
                "77939694a3e9d6f5"
            ],
            [
                "1e777d1bda543b87"
            ],
            [
                "4bc5d3c06801d73c"
            ],
            [
                "4319d2aaa27caf38"
            ],
            [
                "234039ccc80bc447"
            ],
            [
                "fcabadd21af3c1cc"
            ],
            [
                "56d072f58f928202"
            ],
            [
                "aa87972efd52eb59"
            ],
            [
                "fc36412ac6b650ac"
            ],
            [
                "84460daf8160cf18"
            ],
            [
                "27b7340832b537fb"
            ],
            [
                "153b25a047f87d3a"
            ]
        ]
    },
    {
        "id": "3fbb469fff1fb46e",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/1/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "77939694a3e9d6f5",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/4/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "234039ccc80bc447",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/8/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 440,
        "wires": []
    },
    {
        "id": "aa87972efd52eb59",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/11/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 560,
        "wires": []
    },
    {
        "id": "4319d2aaa27caf38",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/7/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 400,
        "wires": []
    },
    {
        "id": "fc36412ac6b650ac",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/12/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 600,
        "wires": []
    },
    {
        "id": "fcabadd21af3c1cc",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/9/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 480,
        "wires": []
    },
    {
        "id": "4bc5d3c06801d73c",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/6/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 360,
        "wires": []
    },
    {
        "id": "1e777d1bda543b87",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/5/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "56d072f58f928202",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/10/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 520,
        "wires": []
    },
    {
        "id": "417964004201af87",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/3/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 240,
        "wires": []
    },
    {
        "id": "b11994675e8b0eb6",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/2/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 200,
        "wires": []
    },
    {
        "id": "84460daf8160cf18",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/13/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 640,
        "wires": []
    },
    {
        "id": "27b7340832b537fb",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/14/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "153b25a047f87d3a",
        "type": "mqtt out",
        "z": "6d003b7f94ce6f96",
        "name": "",
        "topic": "rugby/players/15/sensors_data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "654adbefc93338fc",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "2ea64382bbe7fb94",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/1/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 120,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "de784e03a5f1a80c",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/2/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "cdee1e49952622c4",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/3/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 200,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "f23caac705709a33",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/4/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 240,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "353a93c63f1aeff8",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/5/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "1562db9dc4838389",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/6/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "9c0d513c69bf6fd6",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/7/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 360,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "0c2ced5f1484ce23",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/8/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 400,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "1b9df29c3553c99d",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/9/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 440,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "2c3d81cf1d4a91b0",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/10/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 480,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "1f78651a13e75672",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/11/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 520,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "11350a4d39896781",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/12/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 560,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "554773842d118617",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/13/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "2c2795640f99b14a",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/14/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "dd21edaa0e12fd7d",
        "type": "mqtt in",
        "z": "61a834ebfc894f6a",
        "name": "",
        "topic": "rugby/players/15/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "66dbe3cbadce9c56"
            ]
        ]
    },
    {
        "id": "50f22344e54343e5",
        "type": "ui_gauge",
        "z": "61a834ebfc894f6a",
        "name": "HR gauge",
        "group": "3b11b91e727413e9",
        "order": 1,
        "width": 5,
        "height": 5,
        "gtype": "gage",
        "title": "Heart Rate",
        "label": "BPM",
        "format": "{{value}}",
        "min": "60",
        "max": "220",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "140",
        "seg2": "180",
        "diff": false,
        "className": "",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "66dbe3cbadce9c56",
        "type": "json",
        "z": "61a834ebfc894f6a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 340,
        "wires": [
            [
                "4523f8d17b7531bc",
                "296dcd1e5ffa1948",
                "e7030ceccc6873bc",
                "38eca338e23fd045",
                "2064ff088a1063cb",
                "5ba651cb3ef75623",
                "fdc3334544693df6",
                "a97a25d76432b3f4"
            ]
        ]
    },
    {
        "id": "4523f8d17b7531bc",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "HR_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.heart_rate.heart_rate !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.heart_rate.heart_rate;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Heart rate data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "50f22344e54343e5",
                "6be51bc47ab9ccbc",
                "7a67ce7401b412a1"
            ]
        ]
    },
    {
        "id": "4cb1e5fa5d50a1b7",
        "type": "ui_dropdown",
        "z": "61a834ebfc894f6a",
        "name": "",
        "label": "Player selection",
        "tooltip": "",
        "place": "Player selection",
        "group": "7b0ea4a0077a49e2",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Prop",
                "value": "rugby/players/1/sensors",
                "type": "str"
            },
            {
                "label": "Prop",
                "value": "rugby/players/2/sensors",
                "type": "str"
            },
            {
                "label": "Hooker",
                "value": "rugby/players/3/sensors",
                "type": "str"
            },
            {
                "label": "Lock",
                "value": "rugby/players/4/sensors",
                "type": "str"
            },
            {
                "label": "Lock",
                "value": "rugby/players/5/sensors",
                "type": "str"
            },
            {
                "label": "Flanker",
                "value": "rugby/players/6/sensors",
                "type": "str"
            },
            {
                "label": "Flanker",
                "value": "rugby/players/7/sensors",
                "type": "str"
            },
            {
                "label": "Number-8",
                "value": "rugby/players/8/sensors",
                "type": "str"
            },
            {
                "label": "Scrum-half",
                "value": "rugby/players/9/sensors",
                "type": "str"
            },
            {
                "label": "Fly-half",
                "value": "rugby/players/10/sensors",
                "type": "str"
            },
            {
                "label": "Center",
                "value": "rugby/players/11/sensors",
                "type": "str"
            },
            {
                "label": "Center",
                "value": "rugby/players/12/sensors",
                "type": "str"
            },
            {
                "label": "Wing",
                "value": "rugby/players/13/sensors",
                "type": "str"
            },
            {
                "label": "Wing",
                "value": "rugby/players/14/sensors",
                "type": "str"
            },
            {
                "label": "Full-back",
                "value": "rugby/players/15/sensors",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "custom-dropdown",
        "x": 160,
        "y": 40,
        "wires": [
            [
                "581aa47f06cea467"
            ]
        ]
    },
    {
        "id": "581aa47f06cea467",
        "type": "change",
        "z": "61a834ebfc894f6a",
        "name": "Set MQTT Topic",
        "rules": [
            {
                "t": "set",
                "p": "player_topic",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "38eca338e23fd045",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "TIME_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    var elapsed_time = msg.payload.elapsed_time;\n    msg.payload = `${elapsed_time} : 00`;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 420,
        "wires": [
            [
                "1bac2e1e61c57c38"
            ]
        ]
    },
    {
        "id": "1bac2e1e61c57c38",
        "type": "ui_text",
        "z": "61a834ebfc894f6a",
        "group": "7b0ea4a0077a49e2",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "time label",
        "label": "Minute:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "296dcd1e5ffa1948",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "SPEED_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.gps.velocity !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.gps.velocity;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Speed data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "eb05d11762606fd0",
                "74009c14398dcb1e"
            ]
        ]
    },
    {
        "id": "eb05d11762606fd0",
        "type": "ui_gauge",
        "z": "61a834ebfc894f6a",
        "name": "SPD gauge",
        "group": "3b11b91e727413e9",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "Velocity",
        "label": "Km/h",
        "format": "{{value}}",
        "min": 0,
        "max": "45",
        "colors": [
            "#008fb3",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 60,
        "seg2": 120,
        "diff": false,
        "className": "",
        "x": 850,
        "y": 220,
        "wires": []
    },
    {
        "id": "e7030ceccc6873bc",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "ROLE_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.role !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.role;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Role data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "b5f5b565aa8b4553"
            ]
        ]
    },
    {
        "id": "b5f5b565aa8b4553",
        "type": "ui_text",
        "z": "61a834ebfc894f6a",
        "group": "7b0ea4a0077a49e2",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "role label",
        "label": "Role under review:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "custom-role",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "15",
        "color": "#ea3434",
        "x": 840,
        "y": 380,
        "wires": []
    },
    {
        "id": "7e06b19f20da54b2",
        "type": "ui_template",
        "z": "61a834ebfc894f6a",
        "group": "7b0ea4a0077a49e2",
        "name": "CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>   \n    .nr-dashboard-cardtitle {\n        font-weight: bold;\n        text-align: center;\n    }\n    .custom-dropdown {\n        position: relative;\n        display: inline-block;\n        justify-content: center; /* Center items horizontally */\n    }\n    .custom-role {\n        text-align: left;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6be51bc47ab9ccbc",
        "type": "ui_chart",
        "z": "61a834ebfc894f6a",
        "name": "HR chart",
        "group": "3b11b91e727413e9",
        "order": 2,
        "width": 7,
        "height": 5,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#4c544a",
            "#d32727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "74009c14398dcb1e",
        "type": "ui_chart",
        "z": "61a834ebfc894f6a",
        "name": "SPD chart",
        "group": "3b11b91e727413e9",
        "order": 4,
        "width": 7,
        "height": 5,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ee90b1",
            "#973b6c",
            "#ff7f0e",
            "#4baf8e",
            "#1e7fa9",
            "#d32727",
            "#cad345",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6289d59359b2073c",
        "type": "ui_chart",
        "z": "61a834ebfc894f6a",
        "name": "TEMP chart",
        "group": "a7f5f6ff18cd6928",
        "order": 2,
        "width": 11,
        "height": 6,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "36",
        "ymax": "40",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e2806f",
            "#cb1515",
            "#968bda",
            "#89d289",
            "#ccd54d",
            "#2845d7",
            "#94ffdf",
            "#f0952d",
            "#c86fa7"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2064ff088a1063cb",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "TEMP_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.temperature.body_temperature !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.temperature.body_temperature;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"Speed data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            [
                "6289d59359b2073c"
            ]
        ]
    },
    {
        "id": "e80ed03d88b2e4c5",
        "type": "ui_chart",
        "z": "61a834ebfc894f6a",
        "name": "B-PRESS chart",
        "group": "a7f5f6ff18cd6928",
        "order": 1,
        "width": 11,
        "height": 4,
        "label": "Blood Pressure",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "40",
        "ymax": "180",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e11414",
            "#3fabcf",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "5ba651cb3ef75623",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "B-PRESS_exct",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'blood_pressure' property\n    if (msg.payload && msg.payload.blood_pressure) {\n        // Access the 'systolic' and 'diastolic' values directly\n        var systolic = msg.payload.blood_pressure.systolic;\n        var diastolic = msg.payload.blood_pressure.diastolic;\n\n        // Prepare the data for the chart\n        msg.payload = [\n            {\n                \"series\": [\"Systolic\", \"Diastolic\"], // Series names\n                \"data\": [[systolic], [diastolic]],   // Data points for each series\n                \"labels\": [\"\"]         // X-axis labels\n            }\n        ];\n    } else {\n        // Handle case where 'blood_pressure' is not present\n        msg.payload = \"Blood pressure data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 340,
        "wires": [
            [
                "e80ed03d88b2e4c5"
            ]
        ]
    },
    {
        "id": "60777f606d6e5d7d",
        "type": "ui_toast",
        "z": "61a834ebfc894f6a",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "HR alert",
        "x": 1000,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7a67ce7401b412a1",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "HB Check",
        "func": "\nvar hb = msg.payload\n\n\nvar message;\nif (hb > 200) {\n    message = \"Heart beat above the critical threshold, pay attention.\";\n}\n\n// Aggiornamento del messaggio di output\nmsg.payload = message;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            [
                "60777f606d6e5d7d"
            ]
        ]
    },
    {
        "id": "fdc3334544693df6",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "SEV_extr",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\n\n// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\nif (msg.topic === player_topic) {\n    // Check if msg.payload is an object and has the 'heart_rate' property\n    if (msg.payload && msg.payload.impact_severity_index.severity_index !== undefined) {\n        // Access the 'heart_rate' value directly\n        msg.payload = msg.payload.impact_severity_index.severity_index;\n    } else {\n        // Handle case where 'heart_rate' is not present\n        msg.payload = \"impact rate data is not available\";\n    }\n    return msg;\n} else {\n    // If the topic does not match, return null\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "a44ee640220c95cc"
            ]
        ]
    },
    {
        "id": "5feb134d3f45f1c4",
        "type": "ui_toast",
        "z": "61a834ebfc894f6a",
        "position": "prompt",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "HR alert",
        "x": 1000,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a44ee640220c95cc",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "SEV Check",
        "func": "var sev = msg.payload\n\nvar message;\nif (sev > 5.3) {\n    message = \"Critical impact, above of critical threshold, pay attention.\";\n    console.log('CRITICAL IMPACT');\n}else{\n    console.log('Continuing execution...');\n}\n\n// Aggiornamento del messaggio di output\nmsg.payload = message;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 40,
        "wires": [
            [
                "5feb134d3f45f1c4"
            ]
        ]
    },
    {
        "id": "a97a25d76432b3f4",
        "type": "function",
        "z": "61a834ebfc894f6a",
        "name": "HEATMAP_exct",
        "func": "// Retrieve the flow variable 'player_topic'\nvar player_topic = flow.get('player_topic');\nvar heatmap_array = [];\n\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\nif (msg.topic === player_topic) {\n    var y = msg.payload.gps.unic;\n\n    for (var i = 0; i < 105 * 65; i++){\n        if (i != y) { heatmap_array.push(0) }\n        else { heatmap_array.push(100); }\n    }\n\n    msg.payload = heatmap_array;\n    return msg;\n} else { return null; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "62a0f28d815113f3"
            ]
        ]
    },
    {
        "id": "62a0f28d815113f3",
        "type": "ui_heat_map",
        "z": "61a834ebfc894f6a",
        "group": "7b0ea4a0077a49e2",
        "order": 7,
        "width": 7,
        "height": 5,
        "name": "",
        "rows": "65",
        "columns": "105",
        "minMax": false,
        "minimumValue": 0,
        "maximumValue": 0,
        "backgroundType": "color",
        "backgroundColor": "#58a43d",
        "image": "never",
        "radius": "35",
        "opacity": "0",
        "blur": "0.65",
        "showValues": false,
        "gridType": "vals",
        "valuesDecimals": 0,
        "showLegend": false,
        "legendType": "none",
        "legendDecimals": 0,
        "legendCount": 2,
        "x": 840,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b689e005840983e7",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/1/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "2a4eab9530af1eea",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/2/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "2219339cef520e91",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/3/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 220,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "7270a4f349e744d6",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/4/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 260,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "45078f7df613462b",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/5/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "f0922ea786fad269",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/6/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 340,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "e2a722e30453c99e",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/7/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 380,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "1313b33137560e16",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/8/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "2b407cf53178ac61",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/9/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 460,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "8a43fe0ed3a7e6c5",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/10/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 500,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "76934de8aac79dc2",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/11/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "1073d80646343be8",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/12/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 580,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "f3b299d3d0b6d744",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/13/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 620,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "aa7080ee594378d5",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/14/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 660,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "895135ed46376303",
        "type": "mqtt in",
        "z": "a272bb0068b56f17",
        "name": "",
        "topic": "rugby/players/15/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 700,
        "wires": [
            [
                "1e64df29047f32f5"
            ]
        ]
    },
    {
        "id": "a48b4adda61b240d",
        "type": "function",
        "z": "a272bb0068b56f17",
        "name": "ALL-HR_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar heartRates = flow.get('heartRates') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined && msg.payload.heart_rate && msg.payload.heart_rate.heart_rate !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var heartRate = msg.payload.heart_rate.heart_rate;\n\n    // Update the heart rate for this player in the heartRates object\n    heartRates[playerId] = heartRate;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('heartRates', heartRates);\n\n    // Prepare the data for the chart\n    var series = Object.keys(heartRates).map(id => [id]); // Create series names\n    var data = Object.values(heartRates).map(hr => [hr]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "5f3924b01c137cb8"
            ]
        ]
    },
    {
        "id": "5f3924b01c137cb8",
        "type": "ui_chart",
        "z": "a272bb0068b56f17",
        "name": "HR chart",
        "group": "a2e82b8aba30acd6",
        "order": 1,
        "width": 7,
        "height": 7,
        "label": "TEAM - Heart Rate",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "80",
        "ymax": "220",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#4c544a",
            "#d32727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "1e64df29047f32f5",
        "type": "json",
        "z": "a272bb0068b56f17",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "a48b4adda61b240d",
                "9d67cdbe6631effd",
                "0f2d45b44294fc84",
                "d5bc24fea147c398",
                "7dee7b1402ab2d7a",
                "f84c6b9f0bf3b49b",
                "dca83ff7d5a0104c"
            ]
        ]
    },
    {
        "id": "7dee7b1402ab2d7a",
        "type": "function",
        "z": "a272bb0068b56f17",
        "name": "TIME_extr",
        "func": "// Ensure payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Check if the current message topic matches the player_topic\n    var elapsed_time = msg.payload.elapsed_time;\n    msg.payload = `${elapsed_time} : 00`;\n    return msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "0f6ba1ca3e111a67"
            ]
        ]
    },
    {
        "id": "6fef3b3ba4b095c9",
        "type": "ui_template",
        "z": "a272bb0068b56f17",
        "group": "97f34b737c0b33dd",
        "name": "CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>   \n    .nr-dashboard-cardtitle {\n        font-weight: bold;\n        color: \"blue\";\n        text-align: center;\n    }\n    .custom-dropdown {\n        position: relative;\n        display: inline-block;\n        justify-content: center; /* Center items horizontally */\n    }\n    .custom-role {\n        text-align: left;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 110,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "dc4c8599f28707d6",
        "type": "ui_chart",
        "z": "a272bb0068b56f17",
        "name": "SPD chart",
        "group": "a2e82b8aba30acd6",
        "order": 3,
        "width": 7,
        "height": 7,
        "label": "TEAM - Velocity",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "45",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#91b9ee",
            "#45a54c",
            "#ff7f0e",
            "#4baf8e",
            "#1e7fa9",
            "#d32727",
            "#e2e79d",
            "#9467bd",
            "#6795c1"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9d67cdbe6631effd",
        "type": "function",
        "z": "a272bb0068b56f17",
        "name": "ALL-SPEED_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the velocities object from the flow context\nvar velocities = flow.get('velocities') || {};\n\n\n // Check if msg.payload has the necessary 'player_id' and 'velocity' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.gps && msg.payload.gps.velocity !== undefined) {\n        // Extract player ID and velocity\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var velocity = msg.payload.gps.velocity;\n\n        // Update the velocity for this player in the velocities object\n        velocities[playerId] = velocity;\n\n        // Store the updated velocities object back into the flow context\n        flow.set('velocities', velocities);\n\n        // Prepare the data for the chart\n        var series = Object.keys(velocities).map(id => [id]); // Create series names\n        var data = Object.values(velocities).map(v => [v]); // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Velocity values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Velocity data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "dc4c8599f28707d6"
            ]
        ]
    },
    {
        "id": "4c3d2351be8f822f",
        "type": "ui_chart",
        "z": "a272bb0068b56f17",
        "name": "CAL chart",
        "group": "a2e82b8aba30acd6",
        "order": 2,
        "width": 7,
        "height": 7,
        "label": "TEAM - Calories",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "2000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#9791ee",
            "#681842",
            "#ca9363",
            "#4baf8e",
            "#58b3da",
            "#d32727",
            "#cad345",
            "#44ab55",
            "#d7c3da"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0f2d45b44294fc84",
        "type": "function",
        "z": "a272bb0068b56f17",
        "name": "ALL-CAL_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the calories object from the flow context\nvar caloriesData = flow.get('caloriesData') || {};\n\n    // Check if msg.payload has the necessary 'player_id' and 'calories' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.calories_consumed && msg.payload.calories_consumed.calories !== undefined) {\n        // Extract player ID and calories\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var calories = msg.payload.calories_consumed.calories;\n\n        // Update the calories data for this player in the caloriesData object\n        caloriesData[playerId] = calories;\n\n        // Store the updated caloriesData object back into the flow context\n        flow.set('caloriesData', caloriesData);\n\n        // Prepare the data for the chart\n        var series = Object.keys(caloriesData).map(id => [id]); // Create series names\n        var data = Object.values(caloriesData).map(c => [c]);             // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Calories values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Calories data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 300,
        "wires": [
            [
                "4c3d2351be8f822f"
            ]
        ]
    },
    {
        "id": "0f6ba1ca3e111a67",
        "type": "ui_gauge",
        "z": "a272bb0068b56f17",
        "name": "",
        "group": "97f34b737c0b33dd",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Match Time",
        "label": "",
        "format": "{{value}}",
        "min": "0",
        "max": "80",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 770,
        "y": 380,
        "wires": []
    },
    {
        "id": "eca7b0c5e4dc37e4",
        "type": "ui_chart",
        "z": "a272bb0068b56f17",
        "name": "TEMP chart",
        "group": "a2e82b8aba30acd6",
        "order": 4,
        "width": 7,
        "height": 7,
        "label": "TEAM - Temperature",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "36",
        "ymax": "40",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e2806f",
            "#cb1515",
            "#968bda",
            "#89d289",
            "#ccd54d",
            "#2845d7",
            "#94ffdf",
            "#f0952d",
            "#c86fa7"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d5bc24fea147c398",
        "type": "function",
        "z": "a272bb0068b56f17",
        "name": "ALL-TEMP_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the temperatures object from the flow context\nvar temperatures = flow.get('temperatures') || {};\n\n    // Check if msg.payload has the necessary 'player_id' and 'temperature' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.temperature && msg.payload.temperature.body_temperature !== undefined) {\n        // Extract player ID and temperature\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var temperature = msg.payload.temperature.body_temperature;\n\n        // Update the temperature for this player in the temperatures object\n        temperatures[playerId] = temperature;\n\n        // Store the updated temperatures object back into the flow context\n        flow.set('temperatures', temperatures);\n\n        // Prepare the data for the chart\n        var series = Object.keys(temperatures).map(id => [id]); // Create series names\n        var data = Object.values(temperatures).map(t => [t]);            // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Temperature values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Temperature data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "eca7b0c5e4dc37e4"
            ]
        ]
    },
    {
        "id": "f84c6b9f0bf3b49b",
        "type": "function",
        "z": "a272bb0068b56f17",
        "name": "ALL-SEV_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the severityIndices object from the flow context\nvar severityIndices = flow.get('severityIndices') || {};\n\n    // Check if msg.payload has the necessary 'player_id' and 'impact_severity_index' properties\n    if (msg.payload && msg.payload.player_id !== undefined && msg.payload.impact_severity_index && msg.payload.impact_severity_index.severity_index !== undefined) {\n        // Extract player ID and severity index\n        var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n        var severityIndex = msg.payload.impact_severity_index.severity_index;\n\n        // Update the severity index for this player in the severityIndices object\n        severityIndices[playerId] = severityIndex;\n\n        // Store the updated severityIndices object back into the flow context\n        flow.set('severityIndices', severityIndices);\n\n        // Prepare the data for the chart\n        var series = Object.keys(severityIndices).map(id => [id]); // Create series names\n        var data = Object.values(severityIndices).map(si => [si]);           // Create data points for each player\n\n        // Format the payload for the graph\n        msg.payload = [\n            {\n                \"series\": series,  // Names of the players as series\n                \"data\": data,      // Severity index values for each player\n                \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n            }\n        ];\n\n        // Return the message to pass the formatted data to the graph\n        return msg;\n    } else {\n        // Handle case where the required data is missing\n        node.warn(\"Severity index data is missing for the player\");\n        return null;\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "2c7737d72d536347"
            ]
        ]
    },
    {
        "id": "2c7737d72d536347",
        "type": "ui_chart",
        "z": "a272bb0068b56f17",
        "name": "SEV chart",
        "group": "97f34b737c0b33dd",
        "order": 21,
        "width": 5,
        "height": "6",
        "label": "TEAM - Severity INDX",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#e2806f",
            "#cb1515",
            "#968bda",
            "#89d289",
            "#ccd54d",
            "#2845d7",
            "#94ffdf",
            "#f0952d",
            "#c86fa7"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "dca83ff7d5a0104c",
        "type": "function",
        "z": "a272bb0068b56f17",
        "name": "ALL-SEV-COUNT_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the impactCounts object from the flow context\nvar impactCounts = flow.get('impactCounts') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'impacts' properties\nif (msg.payload && msg.payload.player_id !== undefined && msg.payload.impacts && msg.payload.impacts.impact_count !== undefined) {\n    // Extract player ID and impact count\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var impactCount = msg.payload.impacts.impact_count;\n\n    // Update the impact count for this player in the impactCounts object\n    impactCounts[playerId] = impactCount;\n\n    // Store the updated impactCounts object back into the flow context\n    flow.set('impactCounts', impactCounts);\n\n    // Prepare the data for the chart\n    var series = Object.keys(impactCounts).map(id => [id]); // Create series names\n    var data = Object.values(impactCounts).map(ic => [ic]);           // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Impact count values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Impact count data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "b71576455c0d1484"
            ]
        ]
    },
    {
        "id": "b71576455c0d1484",
        "type": "ui_chart",
        "z": "a272bb0068b56f17",
        "name": "SEV-COUNT chart",
        "group": "97f34b737c0b33dd",
        "order": 10,
        "width": 5,
        "height": 5,
        "label": "TEAM - Impact COUNT",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#b4e26f",
            "#158ecb",
            "#da8bb5",
            "#bf89d2",
            "#504dd5",
            "#d72828",
            "#fff694",
            "#f0952d",
            "#6fc8c2"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "cb5ddc09dbe15faf",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/1/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "0dbe2f18d36ee48b",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/2/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 160,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "9431ebc6e52530e4",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/3/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "fd0ff55df64c779f",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/4/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "8494532ca5fb57c5",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/5/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "2ba6239475b5574b",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/6/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "7cac6e3993b5ac09",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/7/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 360,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "59923425563a7d60",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/8/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 400,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "408989a57d6f6a18",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/9/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 440,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "a7ca26e83da2ff03",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/10/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 480,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "70637f14a69416f1",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/11/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 520,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "516de87c5f4c4dcf",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/12/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 560,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "3eba0537cd4471e8",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/13/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "7b20551976975d9a",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/14/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "53ef2595e73ac950",
        "type": "mqtt in",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "topic": "rugby/players/15/realtime/metrics",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "654adbefc93338fc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "af158ea893305abc"
            ]
        ]
    },
    {
        "id": "af158ea893305abc",
        "type": "json",
        "z": "ad3a7eee14e7200e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "971317788ada68a1",
                "98267c06e395637f",
                "dc1159204d8cd322",
                "58c60e948e4d57be",
                "6aa9475f7e1a3ed8",
                "413b0ee41b4d8bbe",
                "80679a8ed50576ca"
            ]
        ]
    },
    {
        "id": "9f538dec8317e06b",
        "type": "ui_chart",
        "z": "ad3a7eee14e7200e",
        "name": "AVG_SPEED",
        "group": "914464c7227e1a69",
        "order": 1,
        "width": 7,
        "height": 5,
        "label": "TEAM - AVG SPEED",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "35",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "971317788ada68a1",
        "type": "function",
        "z": "ad3a7eee14e7200e",
        "name": "AVG_SPEED_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar avg_speed = flow.get('AVG_SPEED') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var avg_s = msg.payload.average_velocity;\n\n    // Update the heart rate for this player in the heartRates object\n    avg_speed[playerId] = avg_s;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('AVG_SPEED', avg_speed);\n\n    // Prepare the data for the chart\n    var series = Object.keys(avg_speed).map(id => [id]); // Create series names\n    var data = Object.values(avg_speed).map(as => [as]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 240,
        "wires": [
            [
                "9f538dec8317e06b"
            ]
        ]
    },
    {
        "id": "1b1024ee47cc78ee",
        "type": "ui_template",
        "z": "ad3a7eee14e7200e",
        "group": "914464c7227e1a69",
        "name": "CSS",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style>   \n    .nr-dashboard-cardtitle {\n        font-weight: bold;\n        color: \"blue\";\n        text-align: center;\n    }\n    .custom-dropdown {\n        position: relative;\n        display: inline-block;\n        justify-content: center; /* Center items horizontally */\n    }\n    .custom-role {\n        text-align: left;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 110,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d243176796d072b5",
        "type": "ui_chart",
        "z": "ad3a7eee14e7200e",
        "name": "TOT_KM",
        "group": "914464c7227e1a69",
        "order": 2,
        "width": 7,
        "height": 5,
        "label": "TEAM - TOTAL DISTANCE",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "98267c06e395637f",
        "type": "function",
        "z": "ad3a7eee14e7200e",
        "name": "TOT_KM_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar tot_km = flow.get('TOTAL_KM') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var t_km = msg.payload.distance_traveled_km;\n\n    // Update the heart rate for this player in the heartRates object\n    tot_km[playerId] = t_km;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('TOTAL_KM', tot_km);\n\n    // Prepare the data for the chart\n    var series = Object.keys(tot_km).map(id => [id]); // Create series names\n    var data = Object.values(tot_km).map(km => [km]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "d243176796d072b5"
            ]
        ]
    },
    {
        "id": "7d4daeff015be8a1",
        "type": "ui_chart",
        "z": "ad3a7eee14e7200e",
        "name": "AVG_CAL",
        "group": "914464c7227e1a69",
        "order": 4,
        "width": 7,
        "height": 5,
        "label": "TEAM - AVG CALORIES",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "2000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 850,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "dc1159204d8cd322",
        "type": "function",
        "z": "ad3a7eee14e7200e",
        "name": "AVG_CAL_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar tot_cal = flow.get('TOTAL_CAL') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var cal = msg.payload.calories_consumed;\n\n    // Update the heart rate for this player in the heartRates object\n    tot_cal[playerId] = cal;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('TOTAL_CAL', tot_cal);\n\n    // Prepare the data for the chart\n    var series = Object.keys(tot_cal).map(id => [id]); // Create series names\n    var data = Object.values(tot_cal).map(cl => [cl]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 320,
        "wires": [
            [
                "7d4daeff015be8a1"
            ]
        ]
    },
    {
        "id": "63f05c8aa3d53d66",
        "type": "ui_chart",
        "z": "ad3a7eee14e7200e",
        "name": "AVG_IMP",
        "group": "914464c7227e1a69",
        "order": 5,
        "width": 7,
        "height": 5,
        "label": "TEAM - AVG IMPACT FORCE",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "5",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "58c60e948e4d57be",
        "type": "function",
        "z": "ad3a7eee14e7200e",
        "name": "AVG_IMP_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar avg_impact = flow.get('IMPACT') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var imp = msg.payload.impacts.average_impact_force;\n\n    // Update the heart rate for this player in the heartRates object\n    avg_impact[playerId] = imp;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('IMPACT', avg_impact);\n\n    // Prepare the data for the chart\n    var series = Object.keys(avg_impact).map(id => [id]); // Create series names\n    var data = Object.values(avg_impact).map(im => [im]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 360,
        "wires": [
            [
                "63f05c8aa3d53d66"
            ]
        ]
    },
    {
        "id": "8cb2a22788c35000",
        "type": "ui_chart",
        "z": "ad3a7eee14e7200e",
        "name": "IMP_RATIO",
        "group": "914464c7227e1a69",
        "order": 6,
        "width": 7,
        "height": 5,
        "label": "TEAM - IMPACT RATIO",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "80679a8ed50576ca",
        "type": "function",
        "z": "ad3a7eee14e7200e",
        "name": "IMP_RATIO_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar imp_to_play = flow.get('RATIO') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var imp = msg.payload.impact_to_play_ratio;\n\n    // Update the heart rate for this player in the heartRates object\n    imp_to_play[playerId] = imp;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('RATIO', imp_to_play);\n\n    // Prepare the data for the chart\n    var series = Object.keys(imp_to_play).map(id => [id]); // Create series names\n    var data = Object.values(imp_to_play).map(im => [im]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 400,
        "wires": [
            [
                "8cb2a22788c35000"
            ]
        ]
    },
    {
        "id": "9c9ccfa163519073",
        "type": "ui_chart",
        "z": "ad3a7eee14e7200e",
        "name": "SPD_RATIO",
        "group": "914464c7227e1a69",
        "order": 3,
        "width": 7,
        "height": 5,
        "label": "TEAM - SPD VARIABILITY",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "waiting for data",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "6aa9475f7e1a3ed8",
        "type": "function",
        "z": "ad3a7eee14e7200e",
        "name": "SPD_RATIO_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the heartRates object from the flow context\nvar spd_ratio = flow.get('SPEED') || {};\n\n// Check if msg.payload has the necessary 'player_id' and 'heart_rate' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and heart rate\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var spd = msg.payload.velocity_variability;\n\n    // Update the heart rate for this player in the heartRates object\n    spd_ratio[playerId] = spd;\n\n    // Store the updated heartRates object back into the flow context\n    flow.set('SPEED', spd_ratio);\n\n    // Prepare the data for the chart\n    var series = Object.keys(spd_ratio).map(id => [id]); // Create series names\n    var data = Object.values(spd_ratio).map(sp => [sp]); // Create data points for each player\n\n    // Format the payload for the graph\n    msg.payload = [\n        {\n            \"series\": series,  // Names of the players as series\n            \"data\": data,      // Heart rate values for each player\n            \"labels\": [\"\"]     // X-axis labels (e.g., time stamps can be added if needed)\n        }\n    ];\n\n    // Return the message to pass the formatted data to the graph\n    return msg;\n} else {\n    // Handle case where the required data is missing\n    node.warn(\"Heart rate data is missing for the player\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            [
                "9c9ccfa163519073"
            ]
        ]
    },
    {
        "id": "413b0ee41b4d8bbe",
        "type": "function",
        "z": "ad3a7eee14e7200e",
        "name": "MAX_IMP_extr",
        "func": "// Ensure the payload is a JSON object\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON\", e);\n        return null;\n    }\n}\n\n// Retrieve or initialize the impact object from the flow context\nvar impact = flow.get('impact') || {};\nvar maxImpact = flow.get('MAX_impact') || -Infinity; // Initialize with a very low number\nvar maxImpactPlayer = flow.get('MAX_impact_player') || \"\"; // Initialize with empty string\n\n// Check if msg.payload has the necessary 'player_id' and 'impact_severity_index' properties\nif (msg.payload && msg.payload.player_id !== undefined) {\n    // Extract player ID and impact severity index\n    var playerId = msg.payload.player_id.toString(); // Convert player ID to string for consistency\n    var imp = msg.payload.impact_severity_index;\n\n    // Update the impact for this player in the impact object\n    impact[playerId] = imp;\n\n    // Store the updated impact object back into the flow context\n    flow.set('impact', impact);\n\n    // Check if the current impact severity index is higher than the current max\n    if (imp > maxImpact) {\n        maxImpact = imp;\n        maxImpactPlayer = playerId; // Update the player ID with the maximum impact\n        flow.set('MAX_impact', maxImpact); // Update the max impact in the flow context\n        flow.set('MAX_impact_player', maxImpactPlayer); // Update the player with the max impact\n    }\n}\n\n// Prepare the output message with the player having the maximum impact severity index\nmsg.payload = {\n    player_id: maxImpactPlayer,\n    impact_severity_index: maxImpact\n};\n\nflow.set('impact', {});\nflow.set('MAX_impact', -Infinity);\nflow.set('MAX_impact_player', \"\");\n\n// Return the message with the player having the highest impact severity index\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "e807128d8a11c8bd",
                "54ed88982badb602"
            ]
        ]
    },
    {
        "id": "e807128d8a11c8bd",
        "type": "ui_text",
        "z": "ad3a7eee14e7200e",
        "group": "4b55eb95bc7cccf8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Severity",
        "format": "{{msg.payload.impact_severity_index}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "16",
        "color": "#e72323",
        "x": 860,
        "y": 520,
        "wires": []
    },
    {
        "id": "54ed88982badb602",
        "type": "ui_text",
        "z": "ad3a7eee14e7200e",
        "group": "4b55eb95bc7cccf8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Player",
        "format": "{{msg.payload.player_id}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "22",
        "color": "#000000",
        "x": 850,
        "y": 480,
        "wires": []
    }
]